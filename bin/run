#!/usr/bin/env ruby
# encoding: UTF-8

$:.unshift File.expand_path('../../lib', __FILE__)

require 'bundler/setup'
require 'json'
require 'open3'
require 'log_processor'
require 'bash'
require 'settings'
require 'craftbelt/minecraft_instance'

include Bash

STDOUT.sync = true
STDIN.sync = true

data_file = File.expand_path(ENV['DATAFILE'])
$build = File.expand_path('../..', __FILE__)

# setup working directory
bash <<-EOS
  rm -rf mods
  rm -rf coremods

  cp #{$build}/ftb/ftbserver.jar .
  cp -R #{$build}/ftb/coremods .
  cp -R #{$build}/ftb/mods .
  cp -R #{$build}/ftb/config .
  rsync -a #{$build}/ftb/config .
EOS

data = JSON.parse(File.read(data_file), symbolize_names: true)
minecraft = Craftbelt::MinecraftInstance.new('.')

schema = JSON.parse(File.read("#{$build}/funpack.json"))['schema']
s = Settings.new(schema, data[:settings].merge(
    "name" => data[:name],
    "level-name" => (minecraft.level_paths.first || 'level')
  )
)
{
  "server.properties.erb" => 'server.properties',
  "XyCraft.cfg.erb" => 'config/XyCraft.cfg',
}.each do |src, dest|
  src = File.expand_path("#{$build}/templates/#{src}")
  dest = File.expand_path(dest)
  File.write(dest, s.erb(File.read(src)))
end

def player_list(player_setting)
  # TODO remove this if when players are passed as an array
  if player_setting.is_a? Array
    player_setting.join("\n")
  else
    player_setting
  end
end

File.write('ops.txt', player_list(data[:settings][:ops]))
File.write('white-list.txt', player_list(data[:settings][:whitelist]))

ram_max = (ENV['RAM'] || 1024).to_i
ram_min = ram_max


Open3.popen3("java",
            "-Xms#{ram_min}M", "-Xmx#{ram_max}M",
            "-jar", "ftbserver.jar",
            "nogui") do |stdin, stdout, stderr, wait_thr|

  processor = LogProcessor.new(wait_thr.pid, s.schema)

  begin
    Thread.new do
      while true
        input = STDIN.readline.strip

        case input
        when 'list'
          stdin.puts 'save-all'
          stdin.puts 'list'

        else
          stdin.puts input
        end
      end
    end

    while true
      event = processor.process_line stderr.readline
      if !event.nil?
        puts JSON.dump(event)
      end
    end
  rescue EOFError
  end
  exit_status = wait_thr.value
end